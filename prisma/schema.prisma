generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id         String    @id @db.VarChar(20)
    pw         String    @db.VarChar(255)
    role       User_role @default(user)
    active     Boolean   @default(true)
    created_at DateTime  @default(now()) @db.DateTime(0)
    broom      Int       @default(0) @db.UnsignedInt
    Issue      Issue[]
    Post       Post[]
}

model Issue {
    id         Int           @id @default(autoincrement()) @db.UnsignedInt
    user       User          @relation(fields: [user_id], references: [id])
    user_id    String        @db.VarChar(20)
    active     Boolean       @default(false)
    solved     Boolean       @default(false)
    title      String        @default("") @db.VarChar(50)
    class      Int           @default(100)
    body       String        @default("") @db.Text
    created_at DateTime      @default(now()) @db.DateTime(0)
    user_lat   Float         @db.Double
    user_lng   Float         @db.Double
    Issue_img  Issue_image[]
}

model Detected_object {
    id            Int          @id @default(autoincrement()) @db.UnsignedInt
    image         Issue_image  @relation(fields: [image_id], references: [id])
    image_id      Int          @db.UnsignedInt
    class         Object_class @relation(fields: [class_id], references: [id])
    class_id      Int          @db.UnsignedInt
    confidence    Float        @default(0) @db.Double
    bounding_size Float        @default(0) @db.Double
}

model Issue_image {
    id              Int               @id @default(autoincrement()) @db.UnsignedInt
    issue           Issue?            @relation(fields: [issue_id], references: [id])
    issue_id        Int               @db.UnsignedInt
    org_name        String            @db.VarChar(255)
    src             String?           @db.VarChar(255)
    uploaded_at     DateTime          @default(now()) @db.DateTime(0)
    time            DateTime?         @db.DateTime(0)
    lat             Float             @db.Double
    lng             Float             @db.Double
    detected_object Detected_object[]
}

model Post_image {
    id          Int      @id @default(autoincrement()) @db.UnsignedInt
    post        Post?    @relation(fields: [post_id], references: [id])
    post_id     Int      @db.UnsignedInt
    org_name    String   @db.VarChar(255)
    src         String?  @db.VarChar(255)
    uploaded_at DateTime @default(now()) @db.DateTime(0)
}

model Post {
    id         Int          @id @default(autoincrement()) @db.UnsignedInt
    user       User?        @relation(fields: [user_id], references: [id])
    user_id    String       @db.VarChar(20)
    title      String       @default("")
    category   Category     @default(none)
    body       String?      @default("") @db.Text
    price      Int?         @db.UnsignedInt
    active     Boolean      @default(true)
    solved     Boolean      @default(false)
    user_lat   Float        @db.Double
    created_at DateTime     @default(now()) @db.DateTime(0)
    user_lng   Float        @db.Double
    Post_img   Post_image[]
}

model Object_class {
    id              Int               @id @default(autoincrement()) @db.UnsignedInt
    name            String            @unique @db.VarChar(255)
    detected_object Detected_object[]
}

enum User_role {
    user
    admin
    test
}

enum Category {
    none
    quest
    trade
}
